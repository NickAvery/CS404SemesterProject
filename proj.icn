$include "evdefs.icn"

link evinit
link evnames
link evsyms


global theta, posx, posy, posz, dirx, diry, dirz, shape, rot, prevShapes, info_block, info



record activation (node, parent, children)

record section_info (ttl_mem, alloc_time)

procedure main(args)
    &window := open("Semester Project","gl", "size=800,600") 
    info := open("Info Screen", "g", "size=300,260")
	infoLegend()
	epsilon := 0.1
	theta := 0.0
	rot := 45
	posx := posy := posz := dirx := diry := dirz := 0


	Fg("diffuse white")
	DrawSphere(0.0, 0.0, 0.0, 5.0)
    
	WAttrib("pick=on")
	

	
	
	
		
	event_mask := AllocMask ++ E_Exit
	time_slice := 200
	log_base   := 10
	
	every arg:= !args do{
		if arg ? match("-lb=") then{
			log_base := numeric(arg[5:0]) | stop("Error - Unable to read " || arg[5:0] || " as a valid log base")
		}else if arg ? match("-ts=") then{
			time_slice := numeric(arg[5:0]) | stop("Error - Unable to read " || arg[5:0] || " as a valid time slice")
		}else{
			av := arg
		}
	}
	
	if *av > 0 then
		EvInit(av) | stop("EvInit() is unable to load: ", av[1])
	else
		EvInit() | stop("Unable to monitor")
	
		
	#this is the starting point for all different branch things
	#can change section names to data type for easier lookups

	initSections()
	initInfoBlock()
	
	EvMon(event_mask, time_slice, log_base)
		updatecamera(120, 0, 120,-8*epsilon)
	Refresh(&window)
	Refresh(w)
	

	
	sectionNum := -1
	lastPick := ""
    while (e := Event(&window)) ~== "q" do {
       case e of { 
				"d": updatecamera(0,0,0,epsilon)
				"a": updatecamera(0,0,0,-epsilon)
				"w": updatecamera(sin(theta)*epsilon*100,0, - cos(theta)*epsilon*100, 0)
				"s": updatecamera(- sin(theta)*epsilon*100,0, cos(theta)*epsilon*100, 0)
				" ": updatecamera(0,5,0,0)
				"c": updatecamera(0,-5,0,0)	
				"r": {
					WindowContents()[sectionNum].skip := ((WindowContents()[sectionNum].skip +1)%2)
					Refresh(&window)
				}
				-1:  {
					if \&pick then {
						if &shift then {
							EraseArea(info, 0, 0, 300, 134)

							DrawString(info, 10, 20, &pick)
							DrawString(info, 15, 33, "Total Memory: " || info_block[&pick].ttl_mem)
							DrawString(info, 15, 46, "Last Allocation: " || "event number " || info_block[&pick].alloc_time)
							DrawString(info, 15, 59, "Last Deallocation: ")
							if lastPick ~== "" then {
								DrawString(info, 10, 80, lastPick)
								DrawString(info, 15, 93, "Total Memory: " || info_block[lastPick].ttl_mem)
								DrawString(info, 15, 106, "Last Allocation: " || "event number " || info_block[lastPick].alloc_time)
								DrawString(info, 15, 119, "Last Deallocation: ")
							}
						}
						else {
							EraseArea(info, 0, 0, 300, 134)
							lastPick := &pick
							DrawString(info, 10, 20, &pick)
							DrawString(info, 15, 33, "Total Memory: " || info_block[&pick].ttl_mem)
							DrawString(info, 15, 46, "Last Allocation: " || "event number " || info_block[&pick].alloc_time)
							DrawString(info, 15, 59, "Last Deallocation: ")
							WindowContents()[sectionNum+2][4] *:= 2
							WindowContents()[sectionNum+2][5] *:= 2
							WindowContents()[sectionNum+2][6] *:= 2
							sectionNum := findWSection(&pick)
							WindowContents()[sectionNum+2][4] /:= 2
							WindowContents()[sectionNum+2][5] /:= 2
							WindowContents()[sectionNum+2][6] /:= 2
							Refresh(&window)
						}
					}
				}
				#rotate - x
				"j": {
					if sectionNum ~= -1 then
						WindowContents()[sectionNum+4].angle -:= 1
					Refresh(x)
				}
				#rotate + x
				"u": {
					if sectionNum ~= -1 then
						WindowContents()[sectionNum+4].angle +:= 1
					Refresh(x)
				}
				#rotate - y
				"k": {
					if sectionNum ~= -1 then
						WindowContents()[sectionNum+5].angle -:= 1
					Refresh(x)
				}
				#rotate + y
				"i": {
					if sectionNum ~= -1 then
						WindowContents()[sectionNum+5].angle +:= 1
					Refresh(x)
				}
				#rotate - z
				"l": {
					if sectionNum ~= -1 then
						WindowContents()[sectionNum+6].angle -:= 1
					Refresh(x)
				}
				#rotate + z
				"o": {
					if sectionNum ~= -1 then
						WindowContents()[sectionNum+6].angle +:= 1
					Refresh(x)
				}
				"1": {
					if sectionNum ~= -1 then{
						WindowContents()[sectionNum+4].angle := 0.0
						WindowContents()[sectionNum+5].angle := 0.0
						WindowContents()[sectionNum+6].angle := 0.0
					}
					Refresh(&window)
				}
				"2": {
					if sectionNum ~= -1 then{
						WindowContents()[sectionNum+4].angle := 0.0 
						WindowContents()[sectionNum+5].angle := 0.0
						WindowContents()[sectionNum+6].angle := 180.0
					}
					Refresh(&window)
				}
				"3": {
					if sectionNum ~= -1 then{
						WindowContents()[sectionNum+4].angle := 90.0
						WindowContents()[sectionNum+5].angle := 0.0 
						WindowContents()[sectionNum+6].angle := 0.0 
					}
					Refresh(&window)
				}
				"4": {
					if sectionNum ~= -1 then{
						WindowContents()[sectionNum+4].angle := 90.0
						WindowContents()[sectionNum+5].angle := 0.0 
						WindowContents()[sectionNum+6].angle := 180.0 
					}
					Refresh(&window)
				}
				"5": {
					if sectionNum ~= -1 then{
						WindowContents()[sectionNum+4].angle := 0.0
						WindowContents()[sectionNum+5].angle := 0.0
						WindowContents()[sectionNum+6].angle := 90.0
					}
					Refresh(&window)
				}
				"6": {
					if sectionNum ~= -1 then{
						WindowContents()[sectionNum+4].angle := 0.0
						WindowContents()[sectionNum+5].angle := 180.0
						WindowContents()[sectionNum+6].angle := 90.0
					}
					Refresh(&window)
				}
			}
    }
	
end

procedure EvMon(event_mask, time_slice, log_base)
	changeT := table()
	
	every k := key(prevShapes) do changeT[k] := 1
	
	count := 0
	total_count := 0
	
	symmap := evsyms()
	
	while EvGet(event_mask) do{
		val := &eventvalue
	
		case &eventcode of {
			#"q" | "\033": stop("user quit")
			
			
			E_List | E_Lelem:{
				#write("List/List Element Allocated"))
				changeT["list"] +:= (string|image)(val)
				
				count +:= 1
				total_count +:= 1
				
				info_block["list"].alloc_time := total_count
			}
			E_Real:{
				#write("Real Allocated")
				changeT["real"] +:= (string|image)(val)
				
				count +:= 1
				total_count +:= 1
				
				info_block["real"].alloc_time := total_count
			}
			E_Record:{
				#write("Record Allocated")
				changeT["record"] +:= (string|image)(val)
				
				count +:= 1
				total_count +:= 1
				
				info_block["record"].alloc_time := total_count
			}
			E_Set | E_Selem:{
				#write("Set/Set Element Allocated")
				changeT["set"] +:= (string|image)(val)
				
				count +:= 1
				total_count +:= 1
				
				info_block["set"].alloc_time := total_count
			}
			E_Table | E_Telem:{
				#write("Table/Table Element Allocated")
				changeT["table"] +:= (string|image)(val)
				
				count +:= 1
				total_count +:= 1
				
				info_block["table"].alloc_time := total_count
			}
			E_String:{
				#write("String Allocated")
				changeT["string"] +:= (string|image)(val)
				
				count +:= 1
				total_count +:= 1
				
				info_block["string"].alloc_time := total_count
			}
			
			E_Exit:{
				# This handles the last time slice before the target program stops
			
				every k := key(prevShapes) do{
					if log_base == -1 then{
						# This uses a 1:1 byte to size scaling, can get out of hand quick
						newLayer(k, prevShapes[k].radius2+(changeT[k]-1))
					}else{
						# This uses a log calculation to scale the cones size
						newLayer(k, prevShapes[k].radius2+log(changeT[k],log_base))
					}
					info_block[k].ttl_mem +:= changeT[k] - 1
					count := 0
				}
			}
			
			# These are the remaining allocation events that this program does
			# not actively monitor.
			
			#E_File   : {write("File Allocated")}
			#E_Slots  : {write("Hash Header Allocated")}
			#E_Tvsubs : {write("Substring tv Allocated")}
			#E_Tvtbl  : {write("Table-element tv Allocated")}
			#E_Cset   : {write("Cset Allocated")}
			#E_Refresh: {write("Refresh Allocated")}
			#E_Coexpr : {write("Co-expression Allocated")}
		}
		
		if count == time_slice then{			
			every k := key(prevShapes) do{
				if log_base == -1 then{
					# This uses a 1:1 byte to size scaling, can get out of hand quick
					newLayer(k, prevShapes[k].radius2+(changeT[k]-1))
				}else{
					# This uses a log calculation to scale the cones size
					newLayer(k, prevShapes[k].radius2+log(changeT[k],log_base))
				}
				info_block[k].ttl_mem +:= changeT[k] - 1
				changeT[k] := 1
			}
			
			count := 0 #reset count
		}

	}
end

#usual update camera function
procedure updatecamera(dx,dy,dz,dtheta)
   theta +:= \dtheta
   posx +:= \dx
   posy +:= \dy
   posz +:= \dz
   dirx := posx + sin(theta)
   diry := posy
   dirz := posz - cos(theta)
   Eye(posx,posy,posz,dirx,diry,dirz,0,1,0)
end

procedure infoLegend()
	Fg(info, "red")
	FillRectangle(info, 10, 135, 15, 15)
	Fg(info, "black")
	DrawString(info, 30, 145, "list (default postion: 1)")
	Fg(info, "yellow")
	FillRectangle(info, 10, 155, 15, 15)
	Fg(info, "black")
	DrawString(info, 30, 165, "table (default postion: 2)")
	Fg(info, "orange")
	FillRectangle(info, 10, 175, 15, 15)
	Fg(info, "black")
	DrawString(info, 30, 185, "string (default postion: 3)")
	Fg(info, "green")
	FillRectangle(info, 10, 195, 15, 15)
	Fg(info, "black")
	DrawString(info, 30, 205, "real (default postion: 4)")
    Fg(info, "blue")
	FillRectangle(info, 10, 215, 15, 15)
	Fg(info, "black")
	DrawString(info, 30, 225, "record (default postion: 5)")
	Fg(info, "purple")
	FillRectangle(info, 10, 235, 15, 15)
	Fg(info, "black")
	DrawString(info, 30, 245, "set (default postion: 6)")
end
#helper for creating all the different data type sections
procedure initSections()
	prevShapes := table()
	
	WSection(&window, "list")
	 PushMatrix(&window)
	  Fg("diffuse red")
	  Translate(0.0, 0.0, 0.0)
	  Rotate(0.0, 1.0, 0.0, 0.0)
	  Rotate(0.0, 0.0, 1.0, 0.0)
	  Rotate(0.0, 0.0, 0.0, 1.0)
      shape := DrawCylinder(0.0, 0.0, 0.0, 5, 0, 1)
	 PopMatrix(&window)
	WSection(&window)
	prevShapes["list"] := shape
	
	WSection(&window, "table")
	 PushMatrix(&window)
	  Fg("diffuse yellow")
	  Translate(0.0, 0.0, 0.0)
	  Rotate(0.0, 1.0, 0.0, 0.0)
	  Rotate(0.0, 0.0, 1.0, 0.0)
	  Rotate(180.0, 0.0, 0.0, 1.0)
      shape := DrawCylinder(0.0, 0.0, 0.0, 5, 0, 1)
	 PopMatrix(&window)
	WSection(&window)
	prevShapes["table"] := shape
	
	WSection(&window, "string")
	 PushMatrix(&window)
	  Fg("diffuse orange")
	  Translate(0.0, 0.0, 0.0)
	  Rotate(90.0, 1.0, 0.0, 0.0)
	  Rotate(0.0, 0.0, 1.0, 0.0)
	  Rotate(0.0, 0.0, 0.0, 1.0)
      shape := DrawCylinder(0.0, 0.0, 0.0, 5, 0, 1)
	 PopMatrix(&window)
	WSection(&window)
	prevShapes["string"] := shape
	
	WSection(&window, "real")
	 PushMatrix(&window)
	  Fg("diffuse green")
	  Translate(0.0, 0.0, 0.0)
	  Rotate(90.0, 1.0, 0.0, 0.0)
	  Rotate(0.0, 0.0, 1.0, 0.0)
	  Rotate(180.0, 0.0, 0.0, 1.0)
      shape := DrawCylinder(0.0, 0.0, 0.0, 5, 0, 1)
	 PopMatrix(&window)
	WSection(&window)
	prevShapes["real"] := shape
	
	WSection(&window, "record")
	 PushMatrix(&window)
	  Fg("diffuse blue")
	  Translate(0.0, 0.0, 0.0)
	  Rotate(0.0, 1.0, 0.0, 0.0)
	  Rotate(0.0, 0.0, 1.0, 0.0)
	  Rotate(90.0, 0.0, 0.0, 1.0)
      shape := DrawCylinder(0.0, 0.0, 0.0, 5, 0, 1)
	 PopMatrix(&window)
	WSection(&window)
	prevShapes["record"] := shape
	
	WSection(&window, "set")
	 PushMatrix(&window)
	  Fg("diffuse purple")
	  Translate(0.0, 0.0, 0.0)
	  Rotate(0.0, 1.0, 0.0, 0.0)
	  Rotate(180.0, 0.0, 1.0, 0.0)
	  Rotate(90.0, 0.0, 0.0, 1.0)
      shape := DrawCylinder(0.0, 0.0, 0.0, 5, 0, 1)
	 PopMatrix(&window)
	WSection(&window)
	prevShapes["set"] := shape
end

procedure initInfoBlock()
	info_block := table()
	
	every k := key(prevShapes) do{
		info_block[k] := section_info()
		info_block[k].ttl_mem := 0
		info_block[k].alloc_time := 0
	}
	
end

#add a new layer to a section given a name and new radius to go to. uses the previous layer to build on, so make sure to save the result
procedure newLayer(sectionName, newRadius)
	prevShape := prevShapes[sectionName]
	DrawCylinder(prevShape.x, prevShape.y+prevShape.height, prevShape.z, prevShape.height, prevShape.radius2, newRadius)
	shape := pull(WindowContents())
	addToWSection(shape, sectionName)
	prevShapes[sectionName] := shape
	
	return 1
end

#add a given shape to a section with a section name.
procedure addToWSection(shape, sectionName)
	sectionNum := findWSection(sectionName)
	if sectionNum ~= -1 then {
		sect := WindowContents()[sectionNum]
		insert(WindowContents(), sectionNum+sect.count-1, shape) # -1 for the pop matrix
		sect.count +:= 1
		fixParentSections(sectionNum, sect)
	}
end


#return the index of the section with section name. if it wasnt found, return -1
procedure findWSection(sectionName)
	wlist := WindowContents()
	i := 1
	every x := !wlist do { 
		if type(x) == "gl_mark" then {
			if x.name == "Mark" then {
				if x.section_name == sectionName then {
					return i
				}
			}
		}
		i +:= 1
	}
	return -1
end

#meant to update parent sections for things like nested sections. Shouldnt have to use it for our project, but good to have
#not exactly sure if it works
procedure fixParentSections(sectionNum, sect)
	notParent := 2 		#1 if false, 2 if true
	i := sect.depth
	wlist := WindowContents()
	every x := !wlist do {
		if i = 1 then break
		if type(x) == "gl_mark" then {
			if x.name == "EndMark" then notParent := 1
			if x.name == "Mark" then {
				if notParent = 2 then x.count +:= 1
				if notParent = 1 then notParent := 2
			}
		}
	}
end